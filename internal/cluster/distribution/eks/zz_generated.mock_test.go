// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package eks

import (
	"context"
	"github.com/banzaicloud/pipeline/internal/cluster"
	"github.com/banzaicloud/pipeline/internal/kubernetes"
	"github.com/stretchr/testify/mock"
)

// MockNodePoolManager is an autogenerated mock for the NodePoolManager type.
type MockNodePoolManager struct {
	mock.Mock
}

// ListNodePools provides a mock function.
func (_m *MockNodePoolManager) ListNodePools(ctx context.Context, c cluster.Cluster, st SecretStore, dcf kubernetes.DynamicClientFactory) ([]NodePool, error) {
	ret := _m.Called(ctx, c, st, dcf)

	var r0 []NodePool
	if rf, ok := ret.Get(0).(func(context.Context, cluster.Cluster, SecretStore, kubernetes.DynamicClientFactory) []NodePool); ok {
		r0 = rf(ctx, c, st, dcf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cluster.Cluster, SecretStore, kubernetes.DynamicClientFactory) error); ok {
		r1 = rf(ctx, c, st, dcf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodePool provides a mock function.
func (_m *MockNodePoolManager) UpdateNodePool(ctx context.Context, c cluster.Cluster, nodePoolName string, nodePoolUpdate NodePoolUpdate) (string, error) {
	ret := _m.Called(ctx, c, nodePoolName, nodePoolUpdate)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, cluster.Cluster, string, NodePoolUpdate) string); ok {
		r0 = rf(ctx, c, nodePoolName, nodePoolUpdate)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cluster.Cluster, string, NodePoolUpdate) error); ok {
		r1 = rf(ctx, c, nodePoolName, nodePoolUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
